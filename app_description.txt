This repository contains AI-powered assistant tools designed to automate and aid in various tasks. The tools are built in Python and leverage Google's Gemini models via the `pydantic-ai` library.

The agents are designed to be interactive, presenting their interfaces in a web browser for user interaction.

The repository contains two primary agents:

1.  **Code Agent (`code_agent.py`)**:
    *   **Purpose**: To autonomously perform coding tasks based on a natural language description.
    *   **Workflow**:
        1.  It performs an initial analysis of the entire codebase to identify relevant files, files that need editing, and new files to be created. It uses a `git grep` tool to search the codebase and improve its analysis.
        2.  It creates a comprehensive, dependency-aware plan for generating or modifying the necessary files.
        3.  **Crucially, it presents this plan in a local web browser for the user to approve, reject, or provide feedback on before any code is written.**
        4.  Upon approval, it iteratively generates or modifies files one by one. Its context management system allows it to request more information and re-run the analysis if it gets stuck.
        5.  Once coding is complete, it automatically creates a new git branch, commits the changes, pushes the branch to the remote repository, and attempts to create a pull request.
    *   **Key Pydantic Models**:
        *   `CodeAnalysis`: Defines the structure for the initial plan, including files to read, edit, and create, along with a generation order.
        *   `GeneratedCode`: Defines the output structure for file generation, including the code itself and context management fields.
    *   **Usage**: Run from the command line with a `--task` argument describing the desired change.

2.  **Teaching Bot (`teaching_bot_cli.py`)**:
    *   **Purpose**: To act as an AI-powered tutor, educating a user on a subject of their choice through an interactive conversation.
    *   **Workflow**:
        1.  Launches a local web server that provides a real-time chat interface in the user's browser.
        2.  It greets the user and asks what subject they would like to learn about.
        3.  Based on the user's responses, it follows a structured teaching methodology: explaining concepts, providing examples, asking questions to test understanding, and offering constructive feedback.
        4.  It maintains the state of the conversation using a `TeachingState` model, which tracks the subject, topics covered, and the user's understanding level.
        5.  Each turn, the AI decides on a `TeachingAction` to perform, which dictates its response and behavior.
    *   **Key Pydantic Models**:
        *   `TeachingState`: Manages the entire state of the learning session.
        *   `TeachingAction`: Defines the bot's next move, such as explaining, asking a question, or giving feedback.
    *   **Usage**: Run `teaching_bot_cli.py` from the command line to start the interactive session.

**Shared Components**:
These files contain common code shared across the agents.
*   **`shared_agents_utils.py`**:
    *   File system operations (`read_file_content`, `write_file_content`).
    *   Git integration (`get_git_files`, `git_grep_search`).
    *   A `BaseAiAgent` class for handling Google API key loading and model configuration.
    *   A context-building function that can summarize files if the total context exceeds a size limit.
*   **`web_server_utils.py` & `teaching_bot_web_server_utils.py`**:
    *   Provide simple, reusable web servers and request handlers for the agents' user interaction flows.
*   **`html_utils.py` & `teaching_bot_html_utils.py`**:
    *   Contain functions to generate the HTML pages used by the agents to display their user interfaces in the browser.

The overall goal of this project is to create intelligent, interactive agents that can reliably and effectively assist human developers and learners.
