This repository contains an AI-powered developer assistant tool designed to automate parts of the software development lifecycle. The tool is built in Python and leverages Google's Gemini models (specifically Gemini 2.5 Pro and Flash) via the `pydantic-ai` library to understand and manipulate code within a git repository.

The agent is designed to be interactive, presenting its plans in a web browser for user approval before taking action.

The primary agent is:

1.  **Code Agent (`code_agent.py`)**:
    *   **Purpose**: To autonomously perform coding tasks based on a natural language description.
    *   **Workflow**:
        1.  It performs an initial analysis of the entire codebase to identify relevant files, files that need editing, and new files to be created. It uses a `git grep` tool to search the codebase and improve its analysis.
        2.  It creates a comprehensive, dependency-aware plan for generating or modifying the necessary files.
        3.  **Crucially, it presents this plan in a local web browser for the user to approve, reject, or provide feedback on before any code is written.**
        4.  Upon approval, it iteratively generates or modifies files one by one. Its context management system allows it to request more information and re-run the analysis if it gets stuck.
        5.  Once coding is complete, it automatically creates a new git branch, commits the changes, pushes the branch to the remote repository, and attempts to create a pull request.
    *   **Key Pydantic Models**:
        *   `CodeAnalysis`: Defines the structure for the initial plan, including files to read, edit, and create, along with a generation order.
        *   `GeneratedCode`: Defines the output structure for file generation, including the code itself and context management fields.
    *   **Usage**: Run from the command line with a `--task` argument describing the desired change.

**Shared Components**:
These files contain common code shared across the agent.
*   **`shared_agents_utils.py`**:
    *   File system operations (`read_file_content`, `write_file_content`).
    *   Git integration (`get_git_files`, `git_grep_search`).
    *   A `BaseAiAgent` class for handling Google API key loading and model configuration.
    *   A context-building function that can summarize files if the total context exceeds a size limit.
    *   **A local web server for handling the interactive user approval workflow.**
*   **`html_utils.py`**:
    *   Contains functions to generate the HTML page used by the Code Agent to display plans and results to the user in their browser.

The overall goal of this project is to create an intelligent, interactive agent that can reliably and effectively assist human developers with coding tasks, directly within their local development environment.
