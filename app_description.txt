This repository contains a suite of AI-powered developer assistant tools designed to automate parts of the software development lifecycle. The tools are built in Python and leverage Google's Gemini models via the `pydantic-ai` library to understand and manipulate code within a git repository.

There are two primary agents:

1.  **Code Agent (`code_agent.py`)**:
    *   **Purpose**: To autonomously perform coding tasks based on a natural language description.
    *   **Workflow**:
        1.  It starts by performing an initial analysis of the entire codebase to identify relevant files, files that need editing, and new files that need to be created. It creates a dependency-aware generation plan.
        2.  It can use a `git grep` tool to search the codebase for specific keywords or functions to improve its analysis.
        3.  It then iteratively generates or modifies files one by one, according to its plan.
        4.  It has a sophisticated context management system. If it lacks the necessary information to generate a file, it can request more context and trigger a re-analysis of its plan. It can also request context for future generation steps to improve efficiency.
    *   **Usage**: Run from the command line with a `--task` argument describing the desired change.

2.  **Code Review Agent (`code_review_agent.py`)**:
    *   **Purpose**: To perform an automated code review on a set of changes.
    *   **Workflow**:
        1.  It identifies changed files in the repository (either local uncommitted changes or changes relative to a specific branch like `main`).
        2.  It performs an analysis to determine which other files are needed as context to understand the changes.
        3.  It then reviews each changed file, providing line-specific comments, severity levels, and general feedback.
    *   **Usage**: Run from the command line with a `--task` argument describing the goal of the changes under review.

**Shared Utilities (`shared_agents_utils.py`)**:
This file contains common code shared by both agents. This includes:
*   File system operations (`read_file_content`, `write_file_content`).
*   Git integration (`get_git_files`).
*   A `BaseAiAgent` class for handling Google API key loading and model configuration.
*   A context-building function (`build_context_from_dict`) that can summarize files if the total context exceeds a certain size limit, ensuring it can handle large repositories.

The overall goal of this project is to create intelligent agents that can reliably and effectively assist human developers with coding and review tasks, directly within their local development environment.
